{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATN\\\\FE\\\\Hotel-Management\\\\src\\\\Components\\\\RoomsContainer\\\\RoomsList.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// // import components\n// import Room from \"../Room/Room\";\n\n// export default function RoomList({ rooms }) {\n//   if (rooms.length === 0) {\n//     return (\n//       <div className=\"empty-search\">\n//         <h3>unfortunately no rooms matched your search parameters</h3>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <section className=\"roomslist\">\n//       <div className=\"roomslist-center\">\n//         {rooms.map((item) => {\n//           return <Room key={item.id} room={item} />;\n//         })}\n//       </div>\n//     </section>\n//   );\n// }\n// import React from \"react\";\n// import Room from \"../Room/Room\";\n\n// export default function RoomList({ rooms }) {\n//   console.log(rooms);\n//   if (rooms.length === 0) {\n//     return (\n//       <div className=\"empty-search\">\n//         <h3>Unfortunately, no rooms matched your search parameters.</h3>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <section className=\"roomslist\">\n//       <div className=\"roomslist-center\">\n//         {rooms.map((room) => (\n//           <Room key={room.id} room={room} />\n//         ))}\n//       </div>\n//     </section>\n//   );\n// }\n// import React, { useEffect, useState } from \"react\";\n// import Room from \"../Room/Room\";\n\n// export default function RoomList() {\n//   const [rooms, setRooms] = useState([]);\n\n//   useEffect(() => {\n//     fetchRooms();\n//   }, []);\n\n//   const fetchRooms = async () => {\n//     try {\n//       const token = localStorage.getItem(\"token\");\n//       const response = await fetch(\n//         \"http://localhost:8080/hotelManagement/rooms\",\n//         {\n//           method: \"GET\",\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       const data = await response.json();\n\n//       if (response.ok) {\n//         console.log(data);\n//         setRooms(data);\n//       } else {\n//         console.error(\"Error fetching rooms:\", data);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching rooms:\", error);\n//     }\n//   };\n\n//   if (rooms.length === 0) {\n//     return (\n//       <div className=\"empty-search\">\n//         <h3>Unfortunately, no rooms matched your search parameters.</h3>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <section className=\"roomslist\">\n//       <div className=\"roomslist-center\">\n//         {rooms.map((room) => (\n//           <Room key={room.id} room={room} />\n//         ))}\n//       </div>\n//     </section>\n//   );\n// }\nimport React, { useState, useEffect } from \"react\";\nimport Room from \"../Room/Room\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RoomList() {\n  _s();\n  const [roomIds, setRoomIds] = useState([]);\n  const [rooms, setRooms] = useState([]);\n  useEffect(() => {\n    fetchRoomIds();\n  }, []);\n  useEffect(() => {\n    if (roomIds.length > 0) {\n      fetchRoomsByIds(roomIds);\n    }\n  }, [roomIds]);\n  const fetchRoomIds = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(\"http://localhost:8080/hotelManagement/rooms/list-id\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Ensure `data` is an array and remove duplicates\n        const uniqueRoomIds = new Set(data).size === data.length ? data : [];\n        setRoomIds(uniqueRoomIds);\n      } else {\n        console.error(\"Error fetching room IDs:\", data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching room IDs:\", error);\n    }\n  };\n  const fetchRoomsByIds = async ids => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const roomPromises = ids.map(id => fetch(`http://localhost:8080/hotelManagement/rooms/get-room/${id}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => response.json()));\n      const settledPromises = await Promise.allSettled(roomPromises);\n      const validRoomsData = settledPromises.filter(promise => promise.status === \"fulfilled\").map(promise => promise.value).filter(room => room && room.id);\n      setRooms(validRoomsData);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-list\",\n    children: rooms.map(room => /*#__PURE__*/_jsxDEV(Room, {\n      room: room\n    }, room.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(RoomList, \"hK6mPNmxEjAQJ8d9BfuoH86FSQk=\");\n_c = RoomList;\nvar _c;\n$RefreshReg$(_c, \"RoomList\");","map":{"version":3,"names":["React","useState","useEffect","Room","jsxDEV","_jsxDEV","RoomList","_s","roomIds","setRoomIds","rooms","setRooms","fetchRoomIds","length","fetchRoomsByIds","token","localStorage","getItem","response","fetch","method","headers","Authorization","data","json","ok","uniqueRoomIds","Set","size","console","error","ids","roomPromises","map","id","then","settledPromises","Promise","allSettled","validRoomsData","filter","promise","status","value","room","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DATN/FE/Hotel-Management/src/Components/RoomsContainer/RoomsList.jsx"],"sourcesContent":["// import React from \"react\";\r\n\r\n// // import components\r\n// import Room from \"../Room/Room\";\r\n\r\n// export default function RoomList({ rooms }) {\r\n//   if (rooms.length === 0) {\r\n//     return (\r\n//       <div className=\"empty-search\">\r\n//         <h3>unfortunately no rooms matched your search parameters</h3>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <section className=\"roomslist\">\r\n//       <div className=\"roomslist-center\">\r\n//         {rooms.map((item) => {\r\n//           return <Room key={item.id} room={item} />;\r\n//         })}\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// }\r\n// import React from \"react\";\r\n// import Room from \"../Room/Room\";\r\n\r\n// export default function RoomList({ rooms }) {\r\n//   console.log(rooms);\r\n//   if (rooms.length === 0) {\r\n//     return (\r\n//       <div className=\"empty-search\">\r\n//         <h3>Unfortunately, no rooms matched your search parameters.</h3>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <section className=\"roomslist\">\r\n//       <div className=\"roomslist-center\">\r\n//         {rooms.map((room) => (\r\n//           <Room key={room.id} room={room} />\r\n//         ))}\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// }\r\n// import React, { useEffect, useState } from \"react\";\r\n// import Room from \"../Room/Room\";\r\n\r\n// export default function RoomList() {\r\n//   const [rooms, setRooms] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetchRooms();\r\n//   }, []);\r\n\r\n//   const fetchRooms = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       const response = await fetch(\r\n//         \"http://localhost:8080/hotelManagement/rooms\",\r\n//         {\r\n//           method: \"GET\",\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       const data = await response.json();\r\n\r\n//       if (response.ok) {\r\n//         console.log(data);\r\n//         setRooms(data);\r\n//       } else {\r\n//         console.error(\"Error fetching rooms:\", data);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching rooms:\", error);\r\n//     }\r\n//   };\r\n\r\n//   if (rooms.length === 0) {\r\n//     return (\r\n//       <div className=\"empty-search\">\r\n//         <h3>Unfortunately, no rooms matched your search parameters.</h3>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <section className=\"roomslist\">\r\n//       <div className=\"roomslist-center\">\r\n//         {rooms.map((room) => (\r\n//           <Room key={room.id} room={room} />\r\n//         ))}\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// }\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Room from \"../Room/Room\";\r\n\r\nexport default function RoomList() {\r\n  const [roomIds, setRoomIds] = useState([]);\r\n  const [rooms, setRooms] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchRoomIds();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (roomIds.length > 0) {\r\n      fetchRoomsByIds(roomIds);\r\n    }\r\n  }, [roomIds]);\r\n\r\n  const fetchRoomIds = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const response = await fetch(\r\n        \"http://localhost:8080/hotelManagement/rooms/list-id\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        // Ensure `data` is an array and remove duplicates\r\n        const uniqueRoomIds = new Set(data).size === data.length ? data : [];\r\n        setRoomIds(uniqueRoomIds);\r\n      } else {\r\n        console.error(\"Error fetching room IDs:\", data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching room IDs:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchRoomsByIds = async (ids) => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const roomPromises = ids.map((id) =>\r\n        fetch(`http://localhost:8080/hotelManagement/rooms/get-room/${id}`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }).then((response) => response.json())\r\n      );\r\n      const settledPromises = await Promise.allSettled(roomPromises);\r\n      const validRoomsData = settledPromises\r\n        .filter((promise) => promise.status === \"fulfilled\")\r\n        .map((promise) => promise.value)\r\n        .filter((room) => room && room.id);\r\n      setRooms(validRoomsData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rooms:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"room-list\">\r\n      {rooms.map((room) => (\r\n        <Room key={room.id} room={room} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}