{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATN\\\\FE\\\\Hotel-Management\\\\src\\\\Pages\\\\UpdateRoom.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// const UpdateRoom = () => {\n//   const { id } = useParams(); // Assumes the ID is passed via URL parameters\n//   const [type, setType] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [price, setPrice] = useState(\"\");\n//   const [capacity, setCapacity] = useState(\"\");\n//   const [petsAllowed, setPetsAllowed] = useState(false);\n//   const [facilities, setFacilities] = useState([]);\n//   const [images, setImages] = useState({\n//     image1: null,\n//     image2: null,\n//     image3: null,\n//   });\n//   const [previewImages, setPreviewImages] = useState({\n//     image1: null,\n//     image2: null,\n//     image3: null,\n//   });\n\n//   useEffect(() => {\n//     // Fetch room data by ID and populate the form\n//     const fetchRoomData = async () => {\n//       const token = localStorage.getItem(\"token\");\n//       try {\n//         const response = await fetch(\n//           `http://localhost:8080/hotelManagement/rooms/get-room/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           setType(data.typeRoom);\n//           setDescription(data.description);\n//           setPrice(data.pricePerDay);\n//           setCapacity(data.maxCapacity);\n//           setPetsAllowed(data.allowPet);\n//           setFacilities(data.facilities || []);\n//           // Assuming the response contains image URLs\n//           setPreviewImages({\n//             image1: data.images[0] || null,\n//             image2: data.images[1] || null,\n//             image3: data.images[2] || null,\n//           });\n//         } else {\n//           const errorText = await response.text();\n//           console.error(\"Error fetching room data:\", errorText);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching room data:\", error);\n//       }\n//     };\n\n//     fetchRoomData();\n//   }, [id]);\n\n//   const handleImageChange = (index, file) => {\n//     setImages((prevImages) => ({\n//       ...prevImages,\n//       [`image${index + 1}`]: file,\n//     }));\n//     setPreviewImages((prevPreviewImages) => ({\n//       ...prevPreviewImages,\n//       [`image${index + 1}`]: URL.createObjectURL(file),\n//     }));\n//   };\n\n//   const handleFacilityChange = (e) => {\n//     const { value } = e.target;\n//     if (!facilities.includes(value)) {\n//       setFacilities([...facilities, value]);\n//     }\n//   };\n\n//   const handleFacilityRemove = (facility) => {\n//     setFacilities(facilities.filter((f) => f !== facility));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const formData = new FormData();\n//     formData.append(\"typeRoom\", type);\n//     formData.append(\"description\", description);\n//     formData.append(\"pricePerDay\", price);\n//     formData.append(\"maxCapacity\", capacity);\n//     formData.append(\"allowPet\", petsAllowed);\n//     facilities.forEach((facility) => {\n//       formData.append(\"facilities\", facility);\n//     });\n//     if (images.image1) formData.append(\"images\", images.image1);\n//     if (images.image2) formData.append(\"images\", images.image2);\n//     if (images.image3) formData.append(\"images\", images.image3);\n//     const token = localStorage.getItem(\"token\");\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8080/hotelManagement/rooms/update-room/${id}`,\n//         {\n//           method: \"POST\",\n//           body: formData,\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log(\"Room updated successfully:\", data);\n//       } else {\n//         const errorText = await response.text();\n//         console.error(\"Error updating room:\", errorText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating room:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"update-room-container\">\n//       <h2>Update Room</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"type\">Type of Room</label>\n//           <select\n//             id=\"type\"\n//             value={type}\n//             onChange={(e) => setType(e.target.value)}\n//           >\n//             <option value=\"\">Select type</option>\n//             <option value=\"single\">Single</option>\n//             <option value=\"double\">Double</option>\n//             <option value=\"suite\">Suite</option>\n//           </select>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"description\">Description</label>\n//           <textarea\n//             id=\"description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             rows=\"4\"\n//           ></textarea>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"price\">Price</label>\n//           <input\n//             type=\"text\"\n//             id=\"price\"\n//             value={price}\n//             onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"capacity\">Max Capacity</label>\n//           <input\n//             type=\"number\"\n//             id=\"capacity\"\n//             value={capacity}\n//             onChange={(e) => setCapacity(e.target.value)}\n//           />\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label>\n//             <input\n//               type=\"checkbox\"\n//               checked={petsAllowed}\n//               onChange={(e) => setPetsAllowed(e.target.checked)}\n//             />\n//             Pets Allowed\n//           </label>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"facilities\">Facilities</label>\n//           <select id=\"facilities\" onChange={handleFacilityChange}>\n//             <option value=\"\">Select facility</option>\n//             {[\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map((facility) => (\n//               <option key={facility} value={facility}>\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\n//               </option>\n//             ))}\n//           </select>\n//           <div className=\"selected-facilities\">\n//             {facilities.map((facility) => (\n//               <div key={facility} className=\"facility-item\">\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\n//                 <button\n//                   type=\"button\"\n//                   onClick={() => handleFacilityRemove(facility)}\n//                 >\n//                   X\n//                 </button>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label>Upload Images</label>\n//           <div className=\"update-room-images-upload\">\n//             {[0, 1, 2].map((index) => (\n//               <div key={index} className=\"image-upload\">\n//                 <input\n//                   type=\"file\"\n//                   onChange={(e) => handleImageChange(index, e.target.files[0])}\n//                 />\n//                 {previewImages[`image${index + 1}`] && (\n//                   <img\n//                     src={previewImages[`image${index + 1}`]}\n//                     alt={`Preview ${index + 1}`}\n//                     className=\"image-preview\"\n//                   />\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//         <button type=\"submit\" className=\"update-room-submit-btn\">\n//           Update Room\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default UpdateRoom;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// const UpdateRoom = () => {\n//   const { id } = useParams(); // Assumes the ID is passed via URL parameters\n//   const [type, setType] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [price, setPrice] = useState(\"\");\n//   const [capacity, setCapacity] = useState(\"\");\n//   const [petsAllowed, setPetsAllowed] = useState(false);\n//   const [facilities, setFacilities] = useState([]);\n//   const [images, setImages] = useState({\n//     image1: null,\n//     image2: null,\n//     image3: null,\n//   });\n//   const [previewImages, setPreviewImages] = useState({\n//     image1: null,\n//     image2: null,\n//     image3: null,\n//   });\n\n//   useEffect(() => {\n//     // Fetch room data by ID and populate the form\n//     const fetchRoomData = async () => {\n//       const token = localStorage.getItem(\"token\");\n//       try {\n//         const response = await fetch(\n//           `http://localhost:8080/hotelManagement/rooms/get-room/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         if (response.ok) {\n//           const data = await response.json();\n//           setType(data.typeRoom);\n//           setDescription(data.description);\n//           setPrice(data.pricePerDay);\n//           setCapacity(data.maxCapacity);\n//           setPetsAllowed(data.allowPet);\n//           setFacilities(data.facilities || []);\n//           // Assuming the response contains image URLs\n//           setPreviewImages({\n//             image1: data.images[0] || null,\n//             image2: data.images[1] || null,\n//             image3: data.images[2] || null,\n//           });\n//         } else {\n//           const errorText = await response.text();\n//           console.error(\"Error fetching room data:\", errorText);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching room data:\", error);\n//       }\n//     };\n\n//     fetchRoomData();\n//   }, [id]);\n\n//   const handleImageChange = (index, file) => {\n//     setImages((prevImages) => ({\n//       ...prevImages,\n//       [`image${index + 1}`]: file,\n//     }));\n//     setPreviewImages((prevPreviewImages) => ({\n//       ...prevPreviewImages,\n//       [`image${index + 1}`]: URL.createObjectURL(file),\n//     }));\n//   };\n\n//   const handleFacilityChange = (e) => {\n//     const { value } = e.target;\n//     if (!facilities.includes(value)) {\n//       setFacilities([...facilities, value]);\n//     }\n//   };\n\n//   const handleFacilityRemove = (facility) => {\n//     setFacilities(facilities.filter((f) => f !== facility));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const formData = new FormData();\n//     formData.append(\"typeRoom\", type);\n//     formData.append(\"description\", description);\n//     formData.append(\"pricePerDay\", price);\n//     formData.append(\"maxCapacity\", capacity);\n//     formData.append(\"allowPet\", petsAllowed);\n//     facilities.forEach((facility) => {\n//       formData.append(\"facilities\", facility);\n//     });\n//     if (images.image1) formData.append(\"images\", images.image1);\n//     if (images.image2) formData.append(\"images\", images.image2);\n//     if (images.image3) formData.append(\"images\", images.image3);\n\n//     // Log the FormData to see what is being sent\n//     for (let [key, value] of formData.entries()) {\n//       console.log(key, value);\n//     }\n\n//     const token = localStorage.getItem(\"token\");\n//     try {\n//       const response = await fetch(\n//         `http://localhost:8080/hotelManagement/rooms/update-room/${id}`,\n//         {\n//           method: \"PUT\",\n//           body: formData,\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         console.log(\"Room updated successfully:\", data);\n//       } else {\n//         const errorText = await response.text();\n//         console.error(\"Error updating room:\", errorText);\n//       }\n//     } catch (error) {\n//       console.error(\"Error updating room:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"update-room-container\">\n//       <h2>Update Room</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"type\">Type of Room</label>\n//           <select\n//             id=\"type\"\n//             value={type}\n//             onChange={(e) => setType(e.target.value)}\n//           >\n//             <option value=\"\">Select type</option>\n//             <option value=\"single\">Single</option>\n//             <option value=\"double\">Double</option>\n//             <option value=\"suite\">Suite</option>\n//           </select>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"description\">Description</label>\n//           <textarea\n//             id=\"description\"\n//             value={description}\n//             onChange={(e) => setDescription(e.target.value)}\n//             rows=\"4\"\n//           ></textarea>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"price\">Price</label>\n//           <input\n//             type=\"text\"\n//             id=\"price\"\n//             value={price}\n//             onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"capacity\">Max Capacity</label>\n//           <input\n//             type=\"number\"\n//             id=\"capacity\"\n//             value={capacity}\n//             onChange={(e) => setCapacity(e.target.value)}\n//           />\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label>\n//             <input\n//               type=\"checkbox\"\n//               checked={petsAllowed}\n//               onChange={(e) => setPetsAllowed(e.target.checked)}\n//             />\n//             Pets Allowed\n//           </label>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label htmlFor=\"facilities\">Facilities</label>\n//           <select id=\"facilities\" onChange={handleFacilityChange}>\n//             <option value=\"\">Select facility</option>\n//             {[\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map((facility) => (\n//               <option key={facility} value={facility}>\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\n//               </option>\n//             ))}\n//           </select>\n//           <div className=\"selected-facilities\">\n//             {facilities.map((facility) => (\n//               <div key={facility} className=\"facility-item\">\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\n//                 <button\n//                   type=\"button\"\n//                   onClick={() => handleFacilityRemove(facility)}\n//                 >\n//                   X\n//                 </button>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"update-room-form-group\">\n//           <label>Upload Images</label>\n//           <div className=\"update-room-images-upload\">\n//             {[0, 1, 2].map((index) => (\n//               <div key={index} className=\"image-upload\">\n//                 <input\n//                   type=\"file\"\n//                   onChange={(e) => handleImageChange(index, e.target.files[0])}\n//                 />\n//                 {previewImages[`image${index + 1}`] && (\n//                   <img\n//                     src={previewImages[`image${index + 1}`]}\n//                     alt={`Preview ${index + 1}`}\n//                     className=\"image-preview\"\n//                   />\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//         <button type=\"submit\" className=\"update-room-submit-btn\">\n//           Update Room\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default UpdateRoom;\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateRoom = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Assumes the ID is passed via URL parameters\n  const [type, setType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [capacity, setCapacity] = useState(\"\");\n  const [petsAllowed, setPetsAllowed] = useState(false);\n  const [facilities, setFacilities] = useState([]);\n  const [images, setImages] = useState({\n    image1: null,\n    image2: null,\n    image3: null\n  });\n  const [previewImages, setPreviewImages] = useState({\n    image1: null,\n    image2: null,\n    image3: null\n  });\n  const [initialImages, setInitialImages] = useState([]);\n  useEffect(() => {\n    // Fetch room data by ID and populate the form\n    const fetchRoomData = async () => {\n      const token = localStorage.getItem(\"token\");\n      try {\n        const response = await fetch(`http://localhost:8080/hotelManagement/rooms/get-room/${id}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setType(data.typeRoom);\n          setDescription(data.description);\n          setPrice(data.pricePerDay);\n          setCapacity(data.maxCapacity);\n          setPetsAllowed(data.allowPet);\n          setFacilities(data.facilities || []);\n          // Assuming the response contains image names or URLs\n          setInitialImages(data.images || []);\n        } else {\n          const errorText = await response.text();\n          console.error(\"Error fetching room data:\", errorText);\n        }\n      } catch (error) {\n        console.error(\"Error fetching room data:\", error);\n      }\n    };\n    fetchRoomData();\n  }, [id]);\n  const handleImageChange = (index, file) => {\n    setImages(prevImages => ({\n      ...prevImages,\n      [`image${index + 1}`]: file\n    }));\n    setPreviewImages(prevPreviewImages => ({\n      ...prevPreviewImages,\n      [`image${index + 1}`]: URL.createObjectURL(file)\n    }));\n  };\n  const handleFacilityChange = e => {\n    const {\n      value\n    } = e.target;\n    if (!facilities.includes(value)) {\n      setFacilities([...facilities, value]);\n    }\n  };\n  const handleFacilityRemove = facility => {\n    setFacilities(facilities.filter(f => f !== facility));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"typeRoom\", type);\n    formData.append(\"description\", description);\n    formData.append(\"pricePerDay\", price);\n    formData.append(\"maxCapacity\", capacity);\n    formData.append(\"allowPet\", petsAllowed);\n    facilities.forEach(facility => {\n      formData.append(\"facilities\", facility);\n    });\n    if (images.image1) formData.append(\"images\", images.image1);\n    if (images.image2) formData.append(\"images\", images.image2);\n    if (images.image3) formData.append(\"images\", images.image3);\n    const token = localStorage.getItem(\"token\");\n    try {\n      const response = await fetch(`http://localhost:8080/hotelManagement/rooms/update-room/${id}`, {\n        method: \"PUT\",\n        body: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Room updated successfully:\", data);\n      } else {\n        const errorText = await response.text();\n        console.error(\"Error updating room:\", errorText);\n      }\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Update Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"type\",\n          children: \"Type of Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"type\",\n          value: type,\n          onChange: e => setType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"single\",\n            children: \"Single\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"double\",\n            children: \"Double\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"suite\",\n            children: \"Suite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: e => setDescription(e.target.value),\n          rows: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"price\",\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"price\",\n          value: price,\n          onChange: e => setPrice(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"capacity\",\n          children: \"Max Capacity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"capacity\",\n          value: capacity,\n          onChange: e => setCapacity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: petsAllowed,\n            onChange: e => setPetsAllowed(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 13\n          }, this), \"Pets Allowed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"facilities\",\n          children: \"Facilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"facilities\",\n          onChange: handleFacilityChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select facility\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this), [\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map(facility => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: facility,\n            children: facility.charAt(0).toUpperCase() + facility.slice(1)\n          }, facility, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-facilities\",\n          children: facilities.map(facility => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"facility-item\",\n            children: [facility.charAt(0).toUpperCase() + facility.slice(1), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleFacilityRemove(facility),\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 17\n            }, this)]\n          }, facility, true, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-room-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-room-images-upload\",\n          children: initialImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: e => handleImageChange(index, e.target.files[0])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 17\n            }, this), previewImages[`image${index + 1}`] ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: previewImages[`image${index + 1}`],\n              alt: `Preview ${index + 1}`,\n              className: \"image-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 19\n            }, this) : image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:8080/hotelManagement/rooms/img/${image}`,\n              alt: `Images ${index + 1}`,\n              className: \"image-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"update-room-submit-btn\",\n        children: \"Update Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 593,\n    columnNumber: 5\n  }, this);\n};\n_s(UpdateRoom, \"TnWbAqvboT+Z+Bx2GyJsFtaXGz4=\", false, function () {\n  return [useParams];\n});\n_c = UpdateRoom;\nexport default UpdateRoom;\nvar _c;\n$RefreshReg$(_c, \"UpdateRoom\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","UpdateRoom","_s","id","type","setType","description","setDescription","price","setPrice","capacity","setCapacity","petsAllowed","setPetsAllowed","facilities","setFacilities","images","setImages","image1","image2","image3","previewImages","setPreviewImages","initialImages","setInitialImages","fetchRoomData","token","localStorage","getItem","response","fetch","headers","Authorization","ok","data","json","typeRoom","pricePerDay","maxCapacity","allowPet","errorText","text","console","error","handleImageChange","index","file","prevImages","prevPreviewImages","URL","createObjectURL","handleFacilityChange","e","value","target","includes","handleFacilityRemove","facility","filter","f","handleSubmit","preventDefault","formData","FormData","append","forEach","method","body","Accept","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","onChange","rows","checked","map","charAt","toUpperCase","slice","onClick","image","files","src","alt","_c","$RefreshReg$"],"sources":["D:/DATN/FE/Hotel-Management/src/Pages/UpdateRoom.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// const UpdateRoom = () => {\r\n//   const { id } = useParams(); // Assumes the ID is passed via URL parameters\r\n//   const [type, setType] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [price, setPrice] = useState(\"\");\r\n//   const [capacity, setCapacity] = useState(\"\");\r\n//   const [petsAllowed, setPetsAllowed] = useState(false);\r\n//   const [facilities, setFacilities] = useState([]);\r\n//   const [images, setImages] = useState({\r\n//     image1: null,\r\n//     image2: null,\r\n//     image3: null,\r\n//   });\r\n//   const [previewImages, setPreviewImages] = useState({\r\n//     image1: null,\r\n//     image2: null,\r\n//     image3: null,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     // Fetch room data by ID and populate the form\r\n//     const fetchRoomData = async () => {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:8080/hotelManagement/rooms/get-room/${id}`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         if (response.ok) {\r\n//           const data = await response.json();\r\n//           setType(data.typeRoom);\r\n//           setDescription(data.description);\r\n//           setPrice(data.pricePerDay);\r\n//           setCapacity(data.maxCapacity);\r\n//           setPetsAllowed(data.allowPet);\r\n//           setFacilities(data.facilities || []);\r\n//           // Assuming the response contains image URLs\r\n//           setPreviewImages({\r\n//             image1: data.images[0] || null,\r\n//             image2: data.images[1] || null,\r\n//             image3: data.images[2] || null,\r\n//           });\r\n//         } else {\r\n//           const errorText = await response.text();\r\n//           console.error(\"Error fetching room data:\", errorText);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching room data:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchRoomData();\r\n//   }, [id]);\r\n\r\n//   const handleImageChange = (index, file) => {\r\n//     setImages((prevImages) => ({\r\n//       ...prevImages,\r\n//       [`image${index + 1}`]: file,\r\n//     }));\r\n//     setPreviewImages((prevPreviewImages) => ({\r\n//       ...prevPreviewImages,\r\n//       [`image${index + 1}`]: URL.createObjectURL(file),\r\n//     }));\r\n//   };\r\n\r\n//   const handleFacilityChange = (e) => {\r\n//     const { value } = e.target;\r\n//     if (!facilities.includes(value)) {\r\n//       setFacilities([...facilities, value]);\r\n//     }\r\n//   };\r\n\r\n//   const handleFacilityRemove = (facility) => {\r\n//     setFacilities(facilities.filter((f) => f !== facility));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const formData = new FormData();\r\n//     formData.append(\"typeRoom\", type);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"pricePerDay\", price);\r\n//     formData.append(\"maxCapacity\", capacity);\r\n//     formData.append(\"allowPet\", petsAllowed);\r\n//     facilities.forEach((facility) => {\r\n//       formData.append(\"facilities\", facility);\r\n//     });\r\n//     if (images.image1) formData.append(\"images\", images.image1);\r\n//     if (images.image2) formData.append(\"images\", images.image2);\r\n//     if (images.image3) formData.append(\"images\", images.image3);\r\n//     const token = localStorage.getItem(\"token\");\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8080/hotelManagement/rooms/update-room/${id}`,\r\n//         {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//             Accept: \"application/json\",\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         console.log(\"Room updated successfully:\", data);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error(\"Error updating room:\", errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating room:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"update-room-container\">\r\n//       <h2>Update Room</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"type\">Type of Room</label>\r\n//           <select\r\n//             id=\"type\"\r\n//             value={type}\r\n//             onChange={(e) => setType(e.target.value)}\r\n//           >\r\n//             <option value=\"\">Select type</option>\r\n//             <option value=\"single\">Single</option>\r\n//             <option value=\"double\">Double</option>\r\n//             <option value=\"suite\">Suite</option>\r\n//           </select>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"description\">Description</label>\r\n//           <textarea\r\n//             id=\"description\"\r\n//             value={description}\r\n//             onChange={(e) => setDescription(e.target.value)}\r\n//             rows=\"4\"\r\n//           ></textarea>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"price\">Price</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"price\"\r\n//             value={price}\r\n//             onChange={(e) => setPrice(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"capacity\">Max Capacity</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"capacity\"\r\n//             value={capacity}\r\n//             onChange={(e) => setCapacity(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={petsAllowed}\r\n//               onChange={(e) => setPetsAllowed(e.target.checked)}\r\n//             />\r\n//             Pets Allowed\r\n//           </label>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"facilities\">Facilities</label>\r\n//           <select id=\"facilities\" onChange={handleFacilityChange}>\r\n//             <option value=\"\">Select facility</option>\r\n//             {[\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map((facility) => (\r\n//               <option key={facility} value={facility}>\r\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//           <div className=\"selected-facilities\">\r\n//             {facilities.map((facility) => (\r\n//               <div key={facility} className=\"facility-item\">\r\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   onClick={() => handleFacilityRemove(facility)}\r\n//                 >\r\n//                   X\r\n//                 </button>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label>Upload Images</label>\r\n//           <div className=\"update-room-images-upload\">\r\n//             {[0, 1, 2].map((index) => (\r\n//               <div key={index} className=\"image-upload\">\r\n//                 <input\r\n//                   type=\"file\"\r\n//                   onChange={(e) => handleImageChange(index, e.target.files[0])}\r\n//                 />\r\n//                 {previewImages[`image${index + 1}`] && (\r\n//                   <img\r\n//                     src={previewImages[`image${index + 1}`]}\r\n//                     alt={`Preview ${index + 1}`}\r\n//                     className=\"image-preview\"\r\n//                   />\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <button type=\"submit\" className=\"update-room-submit-btn\">\r\n//           Update Room\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UpdateRoom;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// const UpdateRoom = () => {\r\n//   const { id } = useParams(); // Assumes the ID is passed via URL parameters\r\n//   const [type, setType] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [price, setPrice] = useState(\"\");\r\n//   const [capacity, setCapacity] = useState(\"\");\r\n//   const [petsAllowed, setPetsAllowed] = useState(false);\r\n//   const [facilities, setFacilities] = useState([]);\r\n//   const [images, setImages] = useState({\r\n//     image1: null,\r\n//     image2: null,\r\n//     image3: null,\r\n//   });\r\n//   const [previewImages, setPreviewImages] = useState({\r\n//     image1: null,\r\n//     image2: null,\r\n//     image3: null,\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     // Fetch room data by ID and populate the form\r\n//     const fetchRoomData = async () => {\r\n//       const token = localStorage.getItem(\"token\");\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:8080/hotelManagement/rooms/get-room/${id}`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         if (response.ok) {\r\n//           const data = await response.json();\r\n//           setType(data.typeRoom);\r\n//           setDescription(data.description);\r\n//           setPrice(data.pricePerDay);\r\n//           setCapacity(data.maxCapacity);\r\n//           setPetsAllowed(data.allowPet);\r\n//           setFacilities(data.facilities || []);\r\n//           // Assuming the response contains image URLs\r\n//           setPreviewImages({\r\n//             image1: data.images[0] || null,\r\n//             image2: data.images[1] || null,\r\n//             image3: data.images[2] || null,\r\n//           });\r\n//         } else {\r\n//           const errorText = await response.text();\r\n//           console.error(\"Error fetching room data:\", errorText);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching room data:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchRoomData();\r\n//   }, [id]);\r\n\r\n//   const handleImageChange = (index, file) => {\r\n//     setImages((prevImages) => ({\r\n//       ...prevImages,\r\n//       [`image${index + 1}`]: file,\r\n//     }));\r\n//     setPreviewImages((prevPreviewImages) => ({\r\n//       ...prevPreviewImages,\r\n//       [`image${index + 1}`]: URL.createObjectURL(file),\r\n//     }));\r\n//   };\r\n\r\n//   const handleFacilityChange = (e) => {\r\n//     const { value } = e.target;\r\n//     if (!facilities.includes(value)) {\r\n//       setFacilities([...facilities, value]);\r\n//     }\r\n//   };\r\n\r\n//   const handleFacilityRemove = (facility) => {\r\n//     setFacilities(facilities.filter((f) => f !== facility));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const formData = new FormData();\r\n//     formData.append(\"typeRoom\", type);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"pricePerDay\", price);\r\n//     formData.append(\"maxCapacity\", capacity);\r\n//     formData.append(\"allowPet\", petsAllowed);\r\n//     facilities.forEach((facility) => {\r\n//       formData.append(\"facilities\", facility);\r\n//     });\r\n//     if (images.image1) formData.append(\"images\", images.image1);\r\n//     if (images.image2) formData.append(\"images\", images.image2);\r\n//     if (images.image3) formData.append(\"images\", images.image3);\r\n\r\n//     // Log the FormData to see what is being sent\r\n//     for (let [key, value] of formData.entries()) {\r\n//       console.log(key, value);\r\n//     }\r\n\r\n//     const token = localStorage.getItem(\"token\");\r\n//     try {\r\n//       const response = await fetch(\r\n//         `http://localhost:8080/hotelManagement/rooms/update-room/${id}`,\r\n//         {\r\n//           method: \"PUT\",\r\n//           body: formData,\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//             Accept: \"application/json\",\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         console.log(\"Room updated successfully:\", data);\r\n//       } else {\r\n//         const errorText = await response.text();\r\n//         console.error(\"Error updating room:\", errorText);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating room:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"update-room-container\">\r\n//       <h2>Update Room</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"type\">Type of Room</label>\r\n//           <select\r\n//             id=\"type\"\r\n//             value={type}\r\n//             onChange={(e) => setType(e.target.value)}\r\n//           >\r\n//             <option value=\"\">Select type</option>\r\n//             <option value=\"single\">Single</option>\r\n//             <option value=\"double\">Double</option>\r\n//             <option value=\"suite\">Suite</option>\r\n//           </select>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"description\">Description</label>\r\n//           <textarea\r\n//             id=\"description\"\r\n//             value={description}\r\n//             onChange={(e) => setDescription(e.target.value)}\r\n//             rows=\"4\"\r\n//           ></textarea>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"price\">Price</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"price\"\r\n//             value={price}\r\n//             onChange={(e) => setPrice(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"capacity\">Max Capacity</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"capacity\"\r\n//             value={capacity}\r\n//             onChange={(e) => setCapacity(e.target.value)}\r\n//           />\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={petsAllowed}\r\n//               onChange={(e) => setPetsAllowed(e.target.checked)}\r\n//             />\r\n//             Pets Allowed\r\n//           </label>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label htmlFor=\"facilities\">Facilities</label>\r\n//           <select id=\"facilities\" onChange={handleFacilityChange}>\r\n//             <option value=\"\">Select facility</option>\r\n//             {[\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map((facility) => (\r\n//               <option key={facility} value={facility}>\r\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//           <div className=\"selected-facilities\">\r\n//             {facilities.map((facility) => (\r\n//               <div key={facility} className=\"facility-item\">\r\n//                 {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   onClick={() => handleFacilityRemove(facility)}\r\n//                 >\r\n//                   X\r\n//                 </button>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"update-room-form-group\">\r\n//           <label>Upload Images</label>\r\n//           <div className=\"update-room-images-upload\">\r\n//             {[0, 1, 2].map((index) => (\r\n//               <div key={index} className=\"image-upload\">\r\n//                 <input\r\n//                   type=\"file\"\r\n//                   onChange={(e) => handleImageChange(index, e.target.files[0])}\r\n//                 />\r\n//                 {previewImages[`image${index + 1}`] && (\r\n//                   <img\r\n//                     src={previewImages[`image${index + 1}`]}\r\n//                     alt={`Preview ${index + 1}`}\r\n//                     className=\"image-preview\"\r\n//                   />\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <button type=\"submit\" className=\"update-room-submit-btn\">\r\n//           Update Room\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UpdateRoom;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst UpdateRoom = () => {\r\n  const { id } = useParams(); // Assumes the ID is passed via URL parameters\r\n  const [type, setType] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [capacity, setCapacity] = useState(\"\");\r\n  const [petsAllowed, setPetsAllowed] = useState(false);\r\n  const [facilities, setFacilities] = useState([]);\r\n  const [images, setImages] = useState({\r\n    image1: null,\r\n    image2: null,\r\n    image3: null,\r\n  });\r\n  const [previewImages, setPreviewImages] = useState({\r\n    image1: null,\r\n    image2: null,\r\n    image3: null,\r\n  });\r\n  const [initialImages, setInitialImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch room data by ID and populate the form\r\n    const fetchRoomData = async () => {\r\n      const token = localStorage.getItem(\"token\");\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:8080/hotelManagement/rooms/get-room/${id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setType(data.typeRoom);\r\n          setDescription(data.description);\r\n          setPrice(data.pricePerDay);\r\n          setCapacity(data.maxCapacity);\r\n          setPetsAllowed(data.allowPet);\r\n          setFacilities(data.facilities || []);\r\n          // Assuming the response contains image names or URLs\r\n          setInitialImages(data.images || []);\r\n        } else {\r\n          const errorText = await response.text();\r\n          console.error(\"Error fetching room data:\", errorText);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching room data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchRoomData();\r\n  }, [id]);\r\n\r\n  const handleImageChange = (index, file) => {\r\n    setImages((prevImages) => ({\r\n      ...prevImages,\r\n      [`image${index + 1}`]: file,\r\n    }));\r\n    setPreviewImages((prevPreviewImages) => ({\r\n      ...prevPreviewImages,\r\n      [`image${index + 1}`]: URL.createObjectURL(file),\r\n    }));\r\n  };\r\n\r\n  const handleFacilityChange = (e) => {\r\n    const { value } = e.target;\r\n    if (!facilities.includes(value)) {\r\n      setFacilities([...facilities, value]);\r\n    }\r\n  };\r\n\r\n  const handleFacilityRemove = (facility) => {\r\n    setFacilities(facilities.filter((f) => f !== facility));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"typeRoom\", type);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"pricePerDay\", price);\r\n    formData.append(\"maxCapacity\", capacity);\r\n    formData.append(\"allowPet\", petsAllowed);\r\n    facilities.forEach((facility) => {\r\n      formData.append(\"facilities\", facility);\r\n    });\r\n    if (images.image1) formData.append(\"images\", images.image1);\r\n    if (images.image2) formData.append(\"images\", images.image2);\r\n    if (images.image3) formData.append(\"images\", images.image3);\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/hotelManagement/rooms/update-room/${id}`,\r\n        {\r\n          method: \"PUT\",\r\n          body: formData,\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Room updated successfully:\", data);\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error(\"Error updating room:\", errorText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating room:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"update-room-container\">\r\n      <h2>Update Room</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"update-room-form-group\">\r\n          <label htmlFor=\"type\">Type of Room</label>\r\n          <select\r\n            id=\"type\"\r\n            value={type}\r\n            onChange={(e) => setType(e.target.value)}\r\n          >\r\n            <option value=\"\">Select type</option>\r\n            <option value=\"single\">Single</option>\r\n            <option value=\"double\">Double</option>\r\n            <option value=\"suite\">Suite</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label htmlFor=\"description\">Description</label>\r\n          <textarea\r\n            id=\"description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            rows=\"4\"\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label htmlFor=\"price\">Price</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"price\"\r\n            value={price}\r\n            onChange={(e) => setPrice(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label htmlFor=\"capacity\">Max Capacity</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"capacity\"\r\n            value={capacity}\r\n            onChange={(e) => setCapacity(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={petsAllowed}\r\n              onChange={(e) => setPetsAllowed(e.target.checked)}\r\n            />\r\n            Pets Allowed\r\n          </label>\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label htmlFor=\"facilities\">Facilities</label>\r\n          <select id=\"facilities\" onChange={handleFacilityChange}>\r\n            <option value=\"\">Select facility</option>\r\n            {[\"wifi\", \"parking\", \"pool\", \"gym\", \"spa\"].map((facility) => (\r\n              <option key={facility} value={facility}>\r\n                {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <div className=\"selected-facilities\">\r\n            {facilities.map((facility) => (\r\n              <div key={facility} className=\"facility-item\">\r\n                {facility.charAt(0).toUpperCase() + facility.slice(1)}\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => handleFacilityRemove(facility)}\r\n                >\r\n                  X\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"update-room-form-group\">\r\n          <label>Upload Images</label>\r\n          <div className=\"update-room-images-upload\">\r\n            {initialImages.map((image, index) => (\r\n              <div key={index} className=\"image-upload\">\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={(e) => handleImageChange(index, e.target.files[0])}\r\n                />\r\n                {previewImages[`image${index + 1}`] ? (\r\n                  <img\r\n                    src={previewImages[`image${index + 1}`]}\r\n                    alt={`Preview ${index + 1}`}\r\n                    className=\"image-preview\"\r\n                  />\r\n                ) : (\r\n                  image && (\r\n                    <img\r\n                      src={`http://localhost:8080/hotelManagement/rooms/img/${image}`}\r\n                      alt={`Images ${index + 1}`}\r\n                      className=\"image-preview\"\r\n                    />\r\n                  )\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"update-room-submit-btn\">\r\n          Update Room\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateRoom;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}